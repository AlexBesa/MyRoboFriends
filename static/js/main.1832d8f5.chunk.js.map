{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","console","log","roboti","fetch","then","response","json","users","filteredRobots","filter","fiecareRobot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oOAkBeA,EAfF,SAACC,GAAU,IACbC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GAClB,OAEI,yBAAKC,UAAY,sDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,cACrB,kBAAC,WAAD,KACI,4BAAKF,GACL,2BAAIC,MCeLK,EAvBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAKf,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACA,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAKK,EAAOG,GAAGR,GACfF,KAAQO,EAAOG,GAAGV,KAClBC,MAAOM,EAAOG,GAAGT,aCD1BW,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKV,UAAU,OACX,2BACIA,UAAY,mCACZW,KAAK,SACLC,YAAY,eACZC,SAAYH,MCCbI,EARA,SAAClB,GACZ,OACI,yBAAKmB,MAAQ,CAACC,SAAS,SAAUC,OAAQ,UACpCrB,EAAMsB,WCgBJC,E,kDAlBX,WAAYvB,GAAO,IAAD,8BACd,cAAMA,IACDwB,MAAQ,CACTC,UAAU,GAHA,E,8DAMAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACH,kDAEJG,KAAK5B,MAAMsB,a,GAfCQ,aC6DZC,G,wDArDX,aAAe,IAAD,8BACV,gBAmBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,QACxCC,QAAQC,IAAI,sBAAsBL,EAAME,OAAOC,QApB/C,EAAKZ,MAAQ,CACTe,OAAO,GACPL,YAAY,IAJN,E,gEASM,IAAD,OACfM,MAAM,8CACDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKf,SAAS,CAACU,OAAOK,S,+BAczB,IAAD,OACEC,EAAiBjB,KAAKJ,MAAMe,OAAOO,QAAO,SAAAC,GAC5C,OAAOA,EAAa9C,KAAK+C,cAAcC,SAAS,EAAKzB,MAAMU,YAAYc,kBAG3E,OADAX,QAAQC,IAAI,0BAA0BO,GACN,IAA7BjB,KAAKJ,MAAMe,OAAOW,OACV,wBAAI9C,UAAU,MAAd,qBAGP,yBAAKA,UAAU,MACX,oDACA,kBAAC,EAAD,CAAWU,aAAcc,KAAKI,iBAE9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUxB,OAASqC,W,GA7CzBf,cCGEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCJNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAIE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLW,QAAQX,MAAMA,EAAMyC,a","file":"static/js/main.1832d8f5.chunk.js","sourcesContent":["// import React from 'react';\r\nimport React , {Component,Fragment} from 'react';\r\n\r\nconst Card = (props) =>{\r\n    const {name,email,id} = props;\r\n    return (\r\n        // <h1>Prietenii mei roboti</h1>\r\n        <div className = 'tc bg-light-green dib br3 pa3 ma2 grow b2 shadow-5'>\r\n            <img alt='robots' src ={`https://robohash.org/${id}?200x200`}/>\r\n            <Fragment>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </Fragment>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Card;\r\n\r\n// //aici e hardcodat\r\n// <div className = 'bg-light-green dib br3 pa3 ma2 grow b2 shadow-5'>\r\n// <img alt='robots' src ='https://robohash.org/alex?200x200'/>\r\n//             <div>\r\n//                 <h2>Besa Alex</h2>\r\n//                 <p>alex.besa@gmail.com</p>\r\n//             </div>\r\n//         </div>","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n    // //pentru eroare la ErrorBoundry App.js\r\n    // if(true){\r\n    //     throw new Error('Nooooooooo!');\r\n    // }\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user,i) =>{\r\n                    return (\r\n                    <Card \r\n                        key={i} \r\n                        id= {robots[i].id} \r\n                        name = {robots[i].name} \r\n                        email={robots[i].email}\r\n                    />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;\r\n\r\n// //varianta initiala cu fiecare card facut individual inainte de map\r\n// <div>\r\n//             <Card id = {robots[0].id} name = {robots[0].name} email={robots[0].email}/>\r\n//             <Card id = {robots[1].id} name = {robots[1].name} email={robots[1].email}/>\r\n//             <Card id = {robots[2].id} name = {robots[2].name} email={robots[2].email}/>\r\n//             <Card id = {robots[3].id} name = {robots[3].name} email={robots[3].email}/>\r\n//         </div>\r\n\r\n// //varianta cu const cardArray\r\n// //ideea e ca se poate pune direct in div\r\n//\r\n// const CardList = ({robots}) =>{\r\n//     const cardArray = robots.map((user,i) =>{\r\n//         return (\r\n//             <Card \r\n//                 key={i} \r\n//                 id= {robots[i].id} \r\n//                 name = {robots[i].name} \r\n//                 email={robots[i].email}\r\n//             />\r\n//         )\r\n//     })\r\n    \r\n//     return(\r\n//         <div>\r\n//             {cardArray}\r\n//         </div>\r\n//     )\r\n// } ","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className = 'pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='cauta roboti'\r\n                onChange = {searchChange}\r\n            />\r\n        </div>\r\n        \r\n    )\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style ={{overflow:'scroll', height :'480px'/*border : '1px solid black'*/}} >\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Avem o eroare aici</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n// import {robots} from './robots.js';\r\n// import { render } from 'react-dom';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            roboti:[],\r\n            searchfield:'',\r\n        }\r\n        //state is a piece of data that describe the app-smart component\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response =>{\r\n                return response.json();\r\n            })\r\n            .then(users =>{\r\n                this.setState({roboti:users})\r\n            });\r\n        \r\n    }\r\n\r\n    onSearchChange = (event) =>{\r\n        this.setState({searchfield:event.target.value});\r\n        console.log(\"event target value \",event.target.value);\r\n        //am mutat mai jos in render commentariul de jos\r\n        // const filteredRobots = this.state.roboti.filter(fiecareRobot =>{\r\n        //     return fiecareRobot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        // })\r\n        // console.log(\"filteredRobots here :  \",filteredRobots);\r\n    }\r\n    render(){\r\n        const filteredRobots = this.state.roboti.filter(fiecareRobot =>{\r\n            return fiecareRobot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        console.log(\"filteredRobots here :  \",filteredRobots);\r\n        if(this.state.roboti.length === 0){\r\n            return <h1 className='tc'>Se incarca datele</h1>\r\n        } else {\r\n        return (\r\n            <div className='tc'>\r\n                <h1>Prietenii mei roboti</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                {/* <CardList robots = {this.state.roboti}/> */}\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots= {filteredRobots}/>\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </div>   \r\n        )\r\n        }       \r\n    }  \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n// import Hello from './Hello'\n// import AppNefolosit from './AppNefolosit';\n// import Card from './Card.js';\n// import CardList from './CardList.js'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <AppNefolosit /> */}\n    {/* <Hello greeting={'Hello '+'React Ninja'}/> */}\n    {/* <CardList robots = {robots}/> */}\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}